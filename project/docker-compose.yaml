version: '3'


networks:
  internal-network:
    driver: bridge


services:

  broker-service:
    build:
      context: ./../broker-service
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - AUTH_SERVICE_URL=http://authentication-service
    networks:
      - internal-network

  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=bd-authenticate-postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
    networks:
    - internal-network

  dashboard:
    build:
      context: ./../front-end
      dockerfile: ./../front-end/front-end.dockerfile
    environment:
      HTML_TEMPLATES_PATH: ./app/cmd/web/templates
      PORT: 80
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    networks:
    - internal-network

  bd-authenticate-postgres:
    image: 'postgres:14.2'
    # uncoment to expose pg to outside
    # ports:
    #   - "5432:5432"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data
    networks:
    - internal-network

  logger-service:
    build:
      context: ./../logger-service
      dockerfile: ./../logger-service/logger-service.dockerfile
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DB_USER: admin
      DB_PASSWORD: password
      DB_URL: mongodb://bd-logger-mongo:27017
      PORT: 80
    depends_on:
      bd-logger-mongo:
        condition: service_healthy
    networks:
    - internal-network

  bd-logger-mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/log-service/mongo/:/data/db
    networks:
    - internal-network
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  nginx-proxy:
    container_name: nginx-proxy
    image: nginx:alpine
    restart: on-failure
    volumes:
      - ../nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 1337:8080
    depends_on:
      - broker-service
      - authentication-service
    networks:
      - internal-network